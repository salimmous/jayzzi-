import { create } from 'zustand';
import { PinData, PinMetrics } from '../types';
import { supabase } from '../lib/supabase';
import { api } from '../lib/api';

interface PinStore {
  pins: PinData[];
  topPins: PinMetrics[];
  loading: boolean;
  error: string | null;
  generatePins: (articleId: string, interests: string[]) => Promise<void>;
  generateBulkPins: (articleIds: string[], interests: string[]) => Promise<void>;
  searchTopPins: (keyword: string) => Promise<void>;
  trackPin: (pinId: string) => Promise<void>;
  deletePin: (pinId: string) => Promise<void>;
  fetchPins: () => Promise<void>;
  updatePinStatus: (pinId: string, status: PinData['status']) => Promise<void>;
}

export const usePinStore = create<PinStore>((set, get) => ({
  pins: [],
  topPins: [],
  loading: false,
  error: null,

  fetchPins: async () => {
    set({ loading: true, error: null });
    try {
      const { data, error } = await supabase
        .from('pins')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;

      set({ pins: data as PinData[] });
    } catch (error) {
      set({ error: (error as Error).message });
    } finally {
      set({ loading: false });
    }
  },

  generatePins: async (articleId, interests) => {
    set({ loading: true, error: null });
    try {
      // Get article data
      const { data: article, error: articleError } = await supabase
        .from('articles')
        .select('*')
        .eq('id', articleId)
        .single();

      if (articleError) throw articleError;

      // Create pins for each image
      const pinPromises = article.images.map(async (image: string) => {
        const { data, error } = await supabase
          .from('pins')
          .insert([{
            article_id: articleId,
            title: article.title,
            description: '', // Will be generated by AI
            image,
            interests,
            status: 'pending'
          }])
          .select()
          .single();

        if (error) throw error;
        return data;
      });

      const newPins = await Promise.all(pinPromises);
      set(state => ({
        pins: [...state.pins, ...newPins]
      }));

      // Start pin content generation
      for (const pin of newPins) {
        await get().updatePinStatus(pin.id, 'processing');
        try {
          const description = await api.generatePinDescription(pin.title, interests);
          await supabase
            .from('pins')
            .update({ 
              description,
              status: 'completed'
            })
            .eq('id', pin.id);
        } catch (error) {
          await get().updatePinStatus(pin.id, 'rejected');
        }
      }

      await get().fetchPins();
    } catch (error) {
      set({ error: (error as Error).message });
    } finally {
      set({ loading: false });
    }
  },

  generateBulkPins: async (articleIds, interests) => {
    set({ loading: true, error: null });
    try {
      for (const articleId of articleIds) {
        await get().generatePins(articleId, interests);
      }
    } catch (error) {
      set({ error: (error as Error).message });
    } finally {
      set({ loading: false });
    }
  },

  searchTopPins: async (keyword) => {
    set({ loading: true, error: null });
    try {
      const results = await api.searchPinterest(keyword);
      set({ topPins: results });
    } catch (error) {
      set({ error: (error as Error).message });
    } finally {
      set({ loading: false });
    }
  },

  trackPin: async (pinId) => {
    set({ loading: true, error: null });
    try {
      const { data: pin } = await supabase
        .from('pins')
        .select('*')
        .eq('id', pinId)
        .single();

      if (!pin) throw new Error('Pin not found');

      // Add to tracking system
      // This would integrate with Pinterest API
    } catch (error) {
      set({ error: (error as Error).message });
    } finally {
      set({ loading: false });
    }
  },

  deletePin: async (pinId) => {
    set({ loading: true, error: null });
    try {
      const { error } = await supabase
        .from('pins')
        .delete()
        .eq('id', pinId);

      if (error) throw error;

      set(state => ({
        pins: state.pins.filter(p => p.id !== pinId)
      }));
    } catch (error) {
      set({ error: (error as Error).message });
    } finally {
      set({ loading: false });
    }
  },

  updatePinStatus: async (pinId, status) => {
    try {
      const { error } = await supabase
        .from('pins')
        .update({ status })
        .eq('id', pinId);

      if (error) throw error;

      set(state => ({
        pins: state.pins.map(p =>
          p.id === pinId ? { ...p, status } : p
        )
      }));
    } catch (error) {
      console.error('Failed to update pin status:', error);
    }
  }
}));
